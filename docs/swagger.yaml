definitions:
  models.Author:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  models.Book:
    properties:
      author:
        type: string
      id:
        type: integer
      title:
        type: string
      year:
        type: integer
    type: object
info:
  contact: {}
  description: This is a golang assignment1
  title: Golang Assignment
  version: "1.0"
paths:
  /authors:
    get:
      description: Retrieves a list of all authors.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Author'
            type: array
      summary: Get all authors
    post:
      consumes:
      - application/json
      description: Creates a new author with provided data.
      parameters:
      - description: Author object
        in: body
        name: author
        required: true
        schema:
          $ref: '#/definitions/models.Author'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Author'
      summary: Create a new author
  /authors/{id}:
    delete:
      description: Deletes an author based on provided ID.
      parameters:
      - description: Author ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete an author
    get:
      description: Retrieves an author based on provided ID.
      parameters:
      - description: Author ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Author'
      summary: Get an author by ID
    put:
      consumes:
      - application/json
      description: Updates an existing author with provided data.
      parameters:
      - description: Author ID
        in: path
        name: id
        required: true
        type: string
      - description: Author object
        in: body
        name: author
        required: true
        schema:
          $ref: '#/definitions/models.Author'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Author'
      summary: Update an existing author
  /books:
    get:
      description: Retrieves a list of all books.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Book'
            type: array
      summary: Get all books
    post:
      consumes:
      - application/json
      description: Creates a new book with provided data.
      parameters:
      - description: Book object
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.Book'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Book'
      summary: Create a new book
  /books/{id}:
    delete:
      description: Deletes a book based on provided ID.
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete a book
    get:
      description: Retrieves a book based on provided ID.
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
      summary: Get a book by ID
    put:
      consumes:
      - application/json
      description: Updates an existing book with provided data.
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      - description: Book object
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.Book'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
      summary: Update an existing book
swagger: "2.0"
